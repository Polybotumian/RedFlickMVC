@{
    ViewData["Title"] = "Movies Page";
}
@using RedFlickMVC.Helpers
@model AllViewModel

@if (User.Identity.IsAuthenticated)
{
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMovieModal">
        Add New Movie
    </button>
}

<div class="container">
    @if (User.Identity.IsAuthenticated)
    {
        <table id="moviesTable" class="display">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Categories</th>
                    <th>Actors</th>
                    <th>Directors</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in Model.Movies)
                {
                    <tr id="@movie.Id">
                        <td>@movie.Id</td>
                        <td>@movie.Title</td>
                        <td>@movie.Description</td>
                        <td>@string.Join(", ", movie.Categories.Select(category => category.Name))</td>
                        <td>@string.Join(", ", movie.Actors.Select(actor => $"{actor.Name} {actor.Surname}"))</td>
                        <td>@string.Join(", ", movie.Directors.Select(director => $"{director.Name} {director.Surname}"))</td>
                        <td>
                            <!-- Buttons for Update and Remove -->
                            <button type="button" class="btn btn-warning" onclick="editMovie('@movie.Id')">Edit</button>
                            <button type="button" class="btn btn-danger" onclick="deleteMovie('@movie.Id')">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <table id="moviesTable" class="display">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Categories</th>
                    <th>Actors</th>
                    <th>Directors</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in Model.Movies)
                {
                    <tr>
                        <td>@movie.Title</td>
                        <td>@movie.Description</td>
                        <td>@string.Join(", ", movie.Categories.Select(category => category.Name))</td>
                        <td>@string.Join(", ", movie.Actors.Select(actor => $"{actor.Name} {actor.Surname}"))</td>
                        <td>@string.Join(", ", movie.Directors.Select(director => $"{director.Name} {director.Surname}"))</td>
                        <td>
                            Not Authorized
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@await Component.InvokeAsync("MovieModal", Model)

<div class="modal fade" id="updateMovieModal" tabindex="-1" aria-labelledby="exampleModalLabel1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel1">Update Movie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Your form goes here -->
                <form method="post" id="updateMovieForm" action="/Movie/update">
                    
                    <div class="mb-3">
                        <input hidden type="number" class="form-control" id="id1" name="Id" required>
                    </div>

                    <div class="mb-3">
                        <label for="title1" class="form-label">Title</label>
                        <input type="text" class="form-control" id="title1" name="Title" required>
                    </div>

                    <div class="mb-3">
                        <label for="description1" class="form-label">Description</label>
                        <textarea class="form-control" id="description1" name="Description"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="movieCategories1" class="form-label">Categories</label>
                        <select multiple class="form-control" id="movieCategories1" name="SelectedCategories1">
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <input type="hidden" id="selectedCategories1" name="SelectedCategories1" />
                    </div>

                    <div class="mb-3">
                        <label for="movieActors1" class="form-label">Actors</label>
                        <select multiple class="form-control" id="movieActors1" name="SelectedActors1">
                            @foreach (var actor in Model.Actors)
                            {
                                <option value="@actor.Id">@actor.Name @actor.Surname</option>
                            }
                        </select>
                        <input type="hidden" id="selectedActors1" name="SelectedActors1" />
                    </div>

                    <div class="mb-3">
                        <label for="movieDirectors1" class="form-label">Directors</label>
                        <select multiple class="form-control" id="movieDirectors1" name="SelectedDirectors1">
                            @foreach (var director in Model.Directors)
                            {
                                <option value="@director.Id">@director.Name @director.Surname</option>
                            }
                        </select>
                        <input type="hidden" id="selectedDirectors1" name="SelectedDirectors1" />
                    </div>

                    <button type="submit" class="btn btn-primary">Update Movie</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $('#addMovieForm').submit(function (e) {
            $('#selectedCategories').val($('#movieCategories').val());
            $('#selectedActors').val($('#movieActors').val());
            $('#selectedDirectors').val($('#movieDirectors').val());

            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (data) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Movie Added Successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    setTimeout(function () {
                        $('#addMovieModal').modal('hide');
                        location.reload();
                    }, 1500);
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops... Something went wrong!',
                        text: 'Failed to add the movie.',
                    });
                }
            });
        });

        function deleteMovie(movieId) {
            console.log('Delete movie with ID: ');

            $.ajax({
                url: '/Movie/Delete/' + movieId,
                type: 'POST',
                data: { id: movieId },
                success: function (data) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Movie Deleted Successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    location.reload();
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops... Something went wrong!',
                        text: 'Failed to delete the movie.',
                    });
                }
            });
        }

        function editMovie(movieId) {
            // Use DataTables API to find the row based on the movieId
            var table = $('#moviesTable').DataTable();
            var row = table.row('#' + movieId);

            // Check if the row is valid
            if (!row) {
                console.error('Row not found for movie ID:', movieId);
                return;
            }

            // Extract movie details from the row
            var data = row.data();
            if (!data) {
                console.error('No data found for movie ID:', movieId);
                return;
            }

            console.log(data);

            // Populate modal fields with extracted data
            $('#id1').val(data.Id); // Set the ID of the updated movie to id1
            $('#title1').val(data.Title);
            $('#description1').val(data.Description);

            // Split and set selected options in the multiselect dropdowns
            $('#movieCategories1').val(data.Categories.split(', ')).trigger('change');
            $('#movieActors1').val(data.Actors.split(', ')).trigger('change');
            $('#movieDirectors1').val(data.Directors.split(', ')).trigger('change');

            // Show the modal for editing
            $('#updateMovieModal').modal('show');
        }


        $(document).ready(function () {
            $('#moviesTable').DataTable({
                "processing": false,
                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": true,
                "info": true,
                // "serverSide": true,
                // "ajax": {
                //     "url": "/Movie/LoadData",
                //     "type": "POST",
                //     "contentType": "application/json",
                //     "data": function (d) {
                //         return JSON.stringify({ draw: d.draw, start: d.start, length: d.length });
                //     }
                // },
                "columns": [
                    { "data": "Id" },
                    { "data": "Title" },
                    { "data": "Description" },
                    { "data": "Categories" },
                    { "data": "Actors" },
                    { "data": "Directors" },
                    { "data": "Actions" }
                ]
            });
        });

    </script>
}